<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_108443_sndml.JobRunnerHTTP</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>JobRunnerHTTP</name>
        <script><![CDATA[var JobRunnerHTTP = Class.create();
JobRunnerHTTP.prototype = {
	initialize: function () {
	},

	startJobRun: function(grRun) {
		this._postMessage(grRun, 'StartJobRun');
	},

	cancelJobRun: function(grRun) {
		this._postMessage(grRun, 'CancelJobRun');
	},

	_postMessage: function(grRun, functionName) {
		var idRun = grRun.getUniqueValue();
		var grAgent = grRun.action.table.database_agent.getRefRecord();
		var host = grAgent.getValue('http_server_host');
		var port = grAgent.getValue('http_server_port');
		var midServer = grAgent.mid_server.name;		
		var message = gs.getMessage(
			'{0} {1} on {2}:{3}', 
			[functionName, grRun.number, host, port]);
		if (midServer) message += ' (' + midServer + ')';
		gs.info(this.type + ' ' + message);
		var httpStatus;
		try {
			var r = new sn_ws.RESTMessageV2('x_108443_sndml.JobRunner', functionName);
			r.setStringParameterNoEscape('agent_host', host);
			r.setStringParameterNoEscape('agent_port', port);
			r.setStringParameterNoEscape('agent_key', grAgent.getUniqueValue());
			r.setStringParameterNoEscape('run_key', idRun);

			//override authentication profile 
			//authentication type ='basic'/ 'oauth2'
			//r.setAuthenticationProfile(authentication type, profile name);

			//set a MID server name if one wants to run the message on MID
			if (midServer) r.setMIDServer(midServer);

			//if the message is configured to communicate through ECC queue, either
			//by setting a MID server or calling executeAsync, one needs to set skip_sensor
			//to true. Otherwise, one may get an intermittent error that the response body is null
			r.setEccParameter('skip_sensor', true);

			var response = r.execute();
			var responseBody = response.getBody();
			httpStatus = response.getStatusCode();
			message = gs.getMessage(
				'{0} HTTP Status={1}', [grRun.number, httpStatus]);
		}
		catch (err) {
			message = err;			
		}
		if (httpStatus == 200) {
			gs.info(this.type + ' ' + functionName + ': ' + message);				
		}
		else {
			gs.error(this.type + ' ' + functionName + ': ' + message);				
			grRun.setValue('status', 'failed');
		}
		grRun.setValue('status_message', message);
		grRun.update();
		return httpStatus;
	},
	
	type: 'JobRunnerHTTP'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>gflewis</sys_created_by>
        <sys_created_on>2024-05-12 01:01:01</sys_created_on>
        <sys_id>574c1be2838ac2103bb15130ceaad36c</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>JobRunnerHTTP</sys_name>
        <sys_package display_value="DataPump" source="x_108443_sndml">f2e68ad32f7d60103152c886f699b6fb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DataPump">f2e68ad32f7d60103152c886f699b6fb</sys_scope>
        <sys_update_name>sys_script_include_574c1be2838ac2103bb15130ceaad36c</sys_update_name>
        <sys_updated_by>gflewis</sys_updated_by>
        <sys_updated_on>2024-08-23 19:51:05</sys_updated_on>
    </sys_script_include>
</record_update>
